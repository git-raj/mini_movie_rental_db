CREATE TABLE MEMBER(
MEMBER_ID INTEGER PRIMARY KEY,
MEMBER_FIRST_NAME VARCHAR(30) NOT NULL,
MEMBER_LAST_NAME VARCHAR(30) NOT NULL,
STREET_ADDRESS_1 VARCHAR(50) NOT NULL,
STREET_ADDRESS_2 VARCHAR(50),
CITY VARCHAR(50) NOT NULL,
STATE VARCHAR(50) NOT NULL,
ZIP DECIMAL(5,0) NOT NULL,
COUNTRY VARCHAR(30)
);

CREATE TABLE MEMBERSHIP_TYPE(
MEMBERSHIP_TYPE_ID INTEGER PRIMARY KEY,
MEMBERSHIP_TYPE_DESCRIPTION VARCHAR(30),
MAX_DVD_ALLOWED INTEGER
);

CREATE TABLE MEMBERSHIP_INFO(
MEMBER_ID INTEGER,
MEMBER_FROM DATE,
MEMBER_TILL DATE,
MEMBERSHIP_STATUS VARCHAR(15),
MEMBERSHIP_TYPE_ID INTEGER,
CURRENT_DVD_ISSUED INTEGER
);

ALTER TABLE MEMBERSHIP_INFO
ADD CONSTRAINT C_MEMBERSHIP_STATUS CHECK (MEMBERSHIP_STATUS IN ('CURRENT', 'EXPIRED'));

CREATE TABLE MOVIE_INFO(
MOVIE_ID INTEGER PRIMARY KEY,
MOVIE_NAME VARCHAR(50) NOT NULL,
RELEASE_DATE DATE,
AWARDS_ACHIEVED VARCHAR(100),
COUNTRY_OF_ORIGIN VARCHAR(30),
GENERE VARCHAR(100),
SUBTITLE_LANGUAGE_OPTIONS VARCHAR(100),
SOUND_LANGUAGES_OPTIONS VARCHAR(100)
);

CREATE TABLE MOVIE_STAFF_LIST(
MOVIE_ID INTEGER,
M_STAFF_FIRST_NAME VARCHAR(30) NOT NULL,
M_STAFF_LAST_NAME VARCHAR(30),
M_STAFF_ROLE VARCHAR(100)
);


CREATE TABLE RENTAL_INFO(
RENTAL_ID INTEGER NOT NULL,
MEMBER_ID INTEGER NOT NULL,
MOVIE_ID INTEGER NOT NULL,
RENTED_DATE DATE NOT NULL,
RETURN_DATE DATE,
RETURN_LOST_INDICATOR VARCHAR(10)
);

ALTER TABLE RENTAL_INFO
ADD CONSTRAINT C_RETURN_LOST_INDICATOR CHECK (RETURN_LOST_INDICATOR IN ('', 'LOST'));

CREATE TABLE RENTAL_HISTORY(
RENTAL_ID INTEGER,
MEMBER_ID INTEGER,
MOVIE_ID INTEGER,
RENTED_DATE DATE,
RETURN_DATE DATE,
RETURN_LOST_INDICATOR VARCHAR(6)
);

CREATE OR REPLACE TABLE QUEUE_TABLE(
QUEUE_ID INTEGER,
MEMBER_ID INTEGER NOT NULL,
MOVIE_ID INTEGER NOT NULL,
SHIPPED_STATUS VARCHAR(1) NOT NULL DEFAULT('N')
);

ALTER TABLE QUEUE_TABLE
ADD CONSTRAINT C_SHIPPED_STATUS CHECK (SHIPPED_STATUS IN ('Y', 'N'));

ALTER TABLE QUEUE_TABLE
MODIFY SHIPPED_STATUS DEFAULT 'N';

CREATE TABLE MOVIE_INVENTORY(
MOVIE_ID INTEGER NOT NULL,
MOVIE_NAME VARCHAR(50),
INITIAL_TOTAL_INVENTORY INTEGER NOT NULL,
INVENTORY_IN_HAND INTEGER NOT NULL,
INVENTORY_OUT INTEGER NOT NULL
);

CREATE TABLE BILLING(
MEMBER_ID INTEGER,
MONTHLY_FEES DECIMAL(5,2),
INCIDENTAL_FEES DECIMAL(5,2)
);

CREATE SEQUENCE member_seq
 START WITH     1
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;

CREATE SEQUENCE movie_seq
 START WITH     1
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;

CREATE SEQUENCE queue_seq
 START WITH     1
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;

ALTER TABLE MEMBERSHIP_INFO
ADD MONTHLY_DVD_ISSUED_COUNT NUMBER;

ALTER TABLE MEMBERSHIP_INFO
ADD CONSTRAINT FK_M_TYPE_ID FOREIGN KEY(MEMBERSHIP_TYPE_ID)
REFERENCES MEMBERSHIP_TYPE(MEMBERSHIP_TYPE_ID);

ALTER TABLE MEMBERSHIP_INFO
ADD CONSTRAINT FK_MEMBER_ID FOREIGN KEY(MEMBER_ID)
REFERENCES MEMBER(MEMBER_ID);

ALTER TABLE BILLING
ADD CONSTRAINT FK_MEMBER_ID2 FOREIGN KEY(MEMBER_ID)
REFERENCES MEMBER(MEMBER_ID);

ALTER TABLE RENTAL_INFO
ADD CONSTRAINT FK_MEMBER_ID3 FOREIGN KEY(MEMBER_ID)
REFERENCES MEMBER(MEMBER_ID);

ALTER TABLE RENTAL_INFO
ADD CONSTRAINT FK_MOVIE_ID FOREIGN KEY(MOVIE_ID)
REFERENCES MOVIE_INFO(MOVIE_ID);

ALTER TABLE MOVIE_STAFF_LIST
ADD CONSTRAINT FK_MOVIE_ID2 FOREIGN KEY(MOVIE_ID)
REFERENCES MOVIE_INFO(MOVIE_ID);





create or replace PROCEDURE CANCEL_MEM_DVD_LOSS(MEM_ID IN NUMBER)
AS
MOV_ID NUMBER;

CURSOR C1 IS
SELECT MOVIE_ID FROM RENTAL_INFO
WHERE MEMBER_ID= MEM_ID;

BEGIN
  OPEN C1;
    LOOP FETCH C1 INTO MOV_ID;
    EXIT WHEN C1%NOTFOUND;
    
    PROC_RENTAL_LOSS(MEM_ID,MOV_ID,'Y');
  
    END LOOP;
  CLOSE C1;

UPDATE MEMBERSHIP_INFO I
SET I.MEMBERSHIP_STATUS= 'EXPIRED'
WHERE I.MEMBER_ID= MEM_ID;

END;




create or replace PROCEDURE CANCEL_MEMBERSHIP(MEM_ID IN NUMBER)
AS

BEGIN

UPDATE MEMBERSHIP_INFO I
SET I.MEMBERSHIP_STATUS= 'EXPIRED',
    I.UPDATED_DATESTAMP=sysdate
WHERE I.MEMBER_ID= MEM_ID;


END;




create or replace PROCEDURE PROC_RENTAL(MEM_ID IN NUMBER, MOV_ID IN NUMBER, RENTED_DT IN DATE)

AS

CURR_ME DATE;
ISSUED_IND NUMBER;

BEGIN

/*
procedure to update membership info and movie inventory
HISTORY:
Created by Saroj on 11/16/2016
Updated by:
Saroj, added month to month dvd issued calculations- 11/20/2016

*/
  --set variable with current monthend value for the member
  SELECT M.CURRENT_MONTHEND INTO CURR_ME FROM MEMBERSHIP_INFO M WHERE M.MEMBER_ID = MEM_ID;




  --updating movie inventory
  UPDATE MOVIE_INVENTORY I
  SET I.INVENTORY_IN_HAND = I.INVENTORY_IN_HAND - 1,
      I.INVENTORY_OUT = I.INVENTORY_OUT + 1
  WHERE I.MOVIE_ID = MOV_ID;
  
  DBMS_OUTPUT.put_line('MOVIE_INVENTORY table updated for: '||MOV_ID||'  for available inventory count and dvd issued count');
  
  --update current dvd issued count
  UPDATE MEMBERSHIP_INFO M
  SET M.CURRENT_DVD_ISSUED= (M.CURRENT_DVD_ISSUED + 1)
  WHERE M.MEMBER_ID = MEM_ID;
  
  DBMS_OUTPUT.put_line('MEMBERSHIP_INFO table for member id: '||MEM_ID ||' updated with current dvd issued count');
  
  --update monthend for montly rental reference
  UPDATE MEMBERSHIP_INFO L
  SET L.CURRENT_MONTHEND = LAST_DAY(RENTED_DT)
  WHERE L.MEMBER_ID = MEM_ID;
   
  IF (CURR_ME < RENTED_DT) THEN
  --reseting rental count for new month
    UPDATE MEMBERSHIP_INFO
    SET MONTHLY_DVD_ISSUED_COUNT = 1
    WHERE MEMBER_ID = MEM_ID;
  
  ELSIF (CURR_ME = RENTED_DT) THEN
  --updating rental count for the month for rentals on monthend date
    UPDATE MEMBERSHIP_INFO
    SET MONTHLY_DVD_ISSUED_COUNT = MONTHLY_DVD_ISSUED_COUNT+1
    WHERE MEMBER_ID = MEM_ID;  
   
  ELSE
    --updating rental count for the month for rentals on non monthend dates
    UPDATE MEMBERSHIP_INFO
    SET MONTHLY_DVD_ISSUED_COUNT = MONTHLY_DVD_ISSUED_COUNT+1
    WHERE MEMBER_ID = MEM_ID;  
  
  END IF;
 

END PROC_RENTAL;





create or replace PROCEDURE PROC_RENTAL_LOSS(MEM_ID IN NUMBER, MOV_ID IN NUMBER, LOSS_INDICATOR IN VARCHAR2)

AS

BEGIN

/*
procedure to update rental dvd lost
HISTORY:
Created by Saroj on 11/16/2016
Updated by:

*/
 
 --updating billing table with $25 fine for lost dvd
 
  UPDATE BILLING M
  SET M.INCIDENTAL_FEES = (M.INCIDENTAL_FEES + 25) --hardcoded $25 fine per dvd loss
  WHERE LOSS_INDICATOR = 'Y' AND M.MEMBER_ID = MEM_ID ;
  DBMS_OUTPUT.put_line('BILLING table for member id: '||MEM_ID ||' added with $25 fine for lost DVD');
 
  -- updating inventory table to reduce the available count
  
  UPDATE MOVIE_INVENTORY I
  SET I.LOST_DVD_COUNT = (I.LOST_DVD_COUNT + 1)
  WHERE LOSS_INDICATOR= 'Y' AND I.MOVIE_ID = MOV_ID;
  DBMS_OUTPUT.put_line('MOVIE_INVENTORY table for movie id: '||MOV_ID ||' updated on lost movie count');  
  
  UPDATE RENTAL_HISTORY H
  SET H.RETURN_DATE= SYSDATE, H.RETURN_LOST_INDICATOR= 'Y'
  WHERE H.MOVIE_ID=MOV_ID AND H.MEMBER_ID= MEM_ID;
  
  DELETE FROM RENTAL_INFO R
  WHERE R.MOVIE_ID=MOV_ID AND R.MEMBER_ID=MEM_ID;
  
END;




create or replace PROCEDURE PROC_RENTAL_RETURN(MEM_ID IN NUMBER, MOV_ID IN NUMBER)

AS

BEGIN

/*
procedure to update membership info and movie inventory for rental returns
HISTORY:
Created by Saroj on 11/16/2016
Updated by:
11/18 saroj, added procedure to check movie queue and issue movie out
11/29 saroj, added steps to update return date into rental info and rental history table
*/
 
  UPDATE MEMBERSHIP_INFO M
  SET M.CURRENT_DVD_ISSUED= (M.CURRENT_DVD_ISSUED - 1)
  WHERE M.MEMBER_ID = MEM_ID;
  
 -- DBMS_OUTPUT.put_line('MEMBERSHIP_INFO table for member id: '||MEM_ID ||' updated with current dvd issued count');
  
  UPDATE MOVIE_INVENTORY I
  SET I.INVENTORY_IN_HAND = I.INVENTORY_IN_HAND + 1,
      I.INVENTORY_OUT = I.INVENTORY_OUT - 1
  WHERE I.MOVIE_ID = MOV_ID;
  
 -- DBMS_OUTPUT.put_line('MOVIE_INVENTORY table updated for: '||MOV_ID||'  for available inventory count and dvd issued count');
  
  /*update rental info table with returned date for the returned movie
   for the member where there was no return date yet */
  DELETE FROM RENTAL_INFO
  WHERE MEMBER_ID= MEM_ID AND MOVIE_ID= MOV_ID;
  
  /*update rental history table with returned date for the returned movie
   for the member where there was no return date yet */
  UPDATE RENTAL_HISTORY
  SET RETURN_DATE= SYSDATE
  WHERE MEMBER_ID= MEM_ID AND MOVIE_ID= MOV_ID AND RETURN_DATE IS NULL;
  
  --trigger procedure to check if any movies need to be issued from the queue
  RENTAL_RETURN_QUEUE_UPDATE(MEM_ID);
  
END;





create or replace PROCEDURE QUEUE_UP_MOVIE_RENTAL(I_MEMBER_ID IN INTEGER,I_MOVIE_NAME IN VARCHAR)
AS
tempID INTEGER;
V_MEMBER_VALID_DVD_ISSUE NUMBER;
ISSUED_IND NUMBER;

BEGIN

/*
procedure to update queue table, and issue rental/update rental info
when valid issue condition is met
HISTORY:
Created by Saroj on 11/16/2016
Updated by:
11/30 saroj, added steps to issue a valid queue right away, 
    and delete the entry from queue table.
*/

SELECT DISTINCT(mi.MOVIE_ID) INTO tempID 
FROM MOVIE_INFO mi
WHERE MI.MOVIE_NAME = I_MOVIE_NAME;

--check for movie already issued to member
SELECT COUNT(MOVIE_ID) INTO ISSUED_IND FROM RENTAL_INFO
WHERE MEMBER_ID=I_MEMBER_ID AND MOVIE_ID= tempID;

SELECT COUNT(I.MEMBER_ID) INTO V_MEMBER_VALID_DVD_ISSUE from MEMBERSHIP_INFO I
JOIN MEMBERSHIP_TYPE T
ON I.MEMBERSHIP_TYPE_ID = T.MEMBERSHIP_TYPE_ID
WHERE LTRIM(RTRIM(I.MEMBERSHIP_STATUS)) ='CURRENT'
AND I.MONTHLY_DVD_ISSUED_COUNT<T.MAX_DVD_ALLOWED_PER_MONTH
AND I.CURRENT_DVD_ISSUED < T.DVD_AT_A_TIME
AND I.MEMBER_ID = I_MEMBER_ID;

IF((V_MEMBER_VALID_DVD_ISSUE > 0) AND (tempID>=1) AND (ISSUED_IND=0)) THEN
INSERT INTO RENTAL_INFO(RENTAL_ID, MEMBER_ID, MOVIE_ID, RENTED_DATE)
VALUES(RENTAL_ID_SEQ.NEXTVAL, I_MEMBER_ID, tempID, SYSDATE);

END IF;

IF (tempID>=1) THEN
INSERT INTO QUEUE_TABLE(QUEUE_ID, MEMBER_ID, MOVIE_ID)
VALUES(queue_seq.NEXTVAL, i_MEMBER_ID, tempID);

/* PRINT MESSAGE*/
DBMS_OUTPUT.PUT_LINE('MOVIE '||I_MOVIE_NAME|| 'HAS BEEN ADDED INTO RENTAL ORDER
                      QUEUE FOR MEMBER_ID:'||I_MEMBER_ID||'. ENJOY!');
ELSE
DBMS_OUTPUT.PUT_LINE('APOLOGIES: MOVIE'||I_MOVIE_NAME||' NOT FOUND.');
DBMS_OUTPUT.PUT_LINE('PLEASE SELECT THE AVAILABLE MOVIE NAME FROM MOVIE_INVENTORY');
END IF;

END;




create or replace PROCEDURE RENTAL_RETURN_QUEUE_UPDATE(MEM_ID IN NUMBER)

AS

V_QUEUE_COUNT NUMBER;
V_QUEUE_ID NUMBER;
Q_MOV_ID NUMBER;
V_MEMBER_VALID_DVD_ISSUE NUMBER;

BEGIN
/*
This procedure can be used to issue the movie to the customers/members after
each rental return, or the beggining of the month, when members might have
movies in the queue to be issued. because the monthly dvd issuable count resets
first of each month, this procedure should be run on the first day of each month.
This procedure is re-runnable for all members(mem_ids).
Created by: Saroj L 11/29/2016
Updates:
*/



SELECT COUNT(QUEUE_ID) INTO V_QUEUE_COUNT FROM QUEUE_TABLE Q
WHERE SHIPPED_STATUS='N'
AND MEMBER_ID=MEM_ID;

IF(V_QUEUE_COUNT>0) THEN

SELECT MIN(QUEUE_ID) INTO V_QUEUE_ID FROM QUEUE_TABLE Q
WHERE SHIPPED_STATUS='N'
AND MEMBER_ID=MEM_ID;

SELECT MOVIE_ID INTO Q_MOV_ID FROM QUEUE_TABLE Q
WHERE SHIPPED_STATUS='N'
AND MEMBER_ID=MEM_ID
AND QUEUE_ID = V_QUEUE_ID;

END IF;

SELECT COUNT(I.MEMBER_ID) INTO V_MEMBER_VALID_DVD_ISSUE from MEMBERSHIP_INFO I
JOIN MEMBERSHIP_TYPE T
ON I.MEMBERSHIP_TYPE_ID = T.MEMBERSHIP_TYPE_ID
WHERE LTRIM(RTRIM(I.MEMBERSHIP_STATUS)) ='CURRENT'
AND I.MONTHLY_DVD_ISSUED_COUNT<T.MAX_DVD_ALLOWED_PER_MONTH
AND I.CURRENT_DVD_ISSUED < T.DVD_AT_A_TIME
AND I.MEMBER_ID = MEM_ID;

IF((V_MEMBER_VALID_DVD_ISSUE > 0) AND (V_QUEUE_COUNT>0)) THEN
  INSERT INTO RENTAL_INFO(RENTAL_ID, MEMBER_ID, MOVIE_ID, RENTED_DATE)
  VALUES(RENTAL_ID_SEQ.NEXTVAL, MEM_ID, Q_MOV_ID, SYSDATE);

  --delete the queue entry after the movie rental has been issued
  DELETE FROM QUEUE_TABLE
  WHERE QUEUE_ID= V_QUEUE_ID;

END IF;

END;




create or replace TRIGGER RENTAL
AFTER INSERT OR UPDATE OF RENTAL_ID, MEMBER_ID, MOVIE_ID, RENTED_DATE ON RENTAL_INFO
FOR EACH ROW

BEGIN
/*
HISTORY:
Created by Saroj on 11/16/2016
Updated by:
Saroj, for rental history archive on 11/17/2016

*/
  --triggers the procedure, passes the parameters of new inserts
  CS699_TERM.PROC_RENTAL(:NEW.MEMBER_ID, :NEW.MOVIE_ID, :NEW.RENTED_DATE);
  
  --inserts records into archive/history table
  INSERT INTO RENTAL_HISTORY(RENTAL_ID, MEMBER_ID, MOVIE_ID, RENTED_DATE)
  VALUES(:NEW.RENTAL_ID, :NEW.MEMBER_ID, :NEW.MOVIE_ID, :NEW.RENTED_DATE);
  
END;
