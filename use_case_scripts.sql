--Use case query:

--#1

SELECT M.MOVIE_NAME, (S.M_STAFF_FIRST_NAME||' '||S.M_STAFF_LAST_NAME)AS DIRECTED_BY FROM MOVIE_STAFF_LIST S
JOIN MOVIE_INFO M
ON S.MOVIE_ID = M.MOVIE_ID
WHERE S.M_STAFF_ROLE= 'DIRECTOR' AND(
(s.M_STAFF_FIRST_NAME||' '||s.M_STAFF_last_NAME) = 'George Lucas'
 OR (s.M_STAFF_FIRST_NAME||' '||s.M_STAFF_last_NAME) = 'Rich Christiano');
 
--#2

select (M.MEMBER_FIRST_NAME||' '||M.MEMBER_LAST_NAME) AS Member_Name, MT.MEMBERSHIP_TYPE_DESCRIPTION
from MEMBERSHIP_INFO MI
JOIN MEMBER M
ON MI.MEMBER_ID = M.MEMBER_ID
JOIN MEMBERSHIP_TYPE MT
ON MI.MEMBERSHIP_TYPE_ID = MT.MEMBERSHIP_TYPE_ID
WHERE MI.MEMBERSHIP_STATUS = 'CURRENT';

--#3

CREATE OR REPLACE PROCEDURE QUEUE_UP_MOVIE_RENTAL(I_MEMBER_ID IN INTEGER,I_MOVIE_NAME IN VARCHAR)
AS
tempID INTEGER;

BEGIN

SELECT DISTINCT(mi.MOVIE_ID) INTO tempID 
FROM MOVIE_INFO mi
WHERE MI.MOVIE_NAME = I_MOVIE_NAME;

IF
tempID>=1
THEN
INSERT INTO QUEUE_TABLE(QUEUE_ID, MEMBER_ID, MOVIE_ID)
VALUES(queue_seq.NEXTVAL, i_MEMBER_ID, tempID);

/* PRINT MESSAGE*/
DBMS_OUTPUT.PUT_LINE('MOVIE '||I_MOVIE_NAME|| 'HAS BEEN ADDED INTO RENTAL ORDER
                      QUEUE FOR MEMBER_ID:'||I_MEMBER_ID||'. ENJOY!');
ELSE
DBMS_OUTPUT.PUT_LINE('APOLOGIES: MOVIE'||I_MOVIE_NAME||' NOT FOUND.');
DBMS_OUTPUT.PUT_LINE('PLEASE SELECT THE AVAILABLE MOVIE NAME FROM MOVIE_INVENTORY');
END IF;

END;

--example::
-->>EXECUTE QUEUE_UP_MOVIE_RENTAL(2, 'Forest Gump');


--#4
 
SELECT I.MOVIE_ID, I.MOVIE_NAME FROM MOVIE_INFO I
WHERE I.MOVIE_ID NOT IN(SELECT MOVIE_ID FROM RENTAL_HISTORY WHERE MEMBER_ID= 1)
ORDER BY I.MOVIE_ID DESC;

--#5

EXECUTE CANCEL_MEM_DVD_LOSS(7);

create or replace PROCEDURE CANCEL_MEM_DVD_LOSS(MEM_ID IN NUMBER)
AS
MOV_ID NUMBER;

CURSOR C1 IS
SELECT MOVIE_ID FROM RENTAL_INFO
WHERE MEMBER_ID= MEM_ID;

BEGIN
  OPEN C1;
    LOOP FETCH C1 INTO MOV_ID;
    EXIT WHEN C1%NOTFOUND;
    
    PROC_RENTAL_LOSS(MEM_ID,MOV_ID,'Y');
  
    END LOOP;
  CLOSE C1;

UPDATE MEMBERSHIP_INFO I
SET I.MEMBERSHIP_STATUS= 'EXPIRED'
WHERE I.MEMBER_ID= MEM_ID;

END;


create or replace PROCEDURE PROC_RENTAL_LOSS(MEM_ID IN NUMBER, MOV_ID IN NUMBER, LOSS_INDICATOR IN VARCHAR2)

AS

BEGIN

/*
procedure to update rental dvd lost
HISTORY:
Created by Saroj on 11/16/2016
Updated by:

*/
 
 --updating billing table with fine for lost dvd
 
  UPDATE BILLING M
  SET M.INCIDENTAL_FEES = (M.INCIDENTAL_FEES + 25) --hardcoded $25 fine per dvd loss
  WHERE LOSS_INDICATOR = 'Y' AND M.MEMBER_ID = MEM_ID ;
  DBMS_OUTPUT.put_line('BILLING table for member id: '||MEM_ID ||' added with $25 fine for lost DVD');
 
  -- updating inventory table to reduce the available count
  
  UPDATE MOVIE_INVENTORY I
  SET I.LOST_DVD_COUNT = (I.LOST_DVD_COUNT + 1)
  WHERE LOSS_INDICATOR= 'Y' AND I.MOVIE_ID = MOV_ID;
  DBMS_OUTPUT.put_line('MOVIE_INVENTORY table for movie id: '||MOV_ID ||' updated on lost movie count');  
  
  UPDATE RENTAL_HISTORY H
  SET H.RETURN_DATE= SYSDATE, H.RETURN_LOST_INDICATOR= 'Y'
  WHERE H.MOVIE_ID=MOV_ID AND H.MEMBER_ID= MEM_ID;
  
  DELETE FROM RENTAL_INFO R
  WHERE R.MOVIE_ID=MOV_ID AND R.MEMBER_ID=MEM_ID;
  
END;


--#6

create or replace PROCEDURE CANCEL_MEMBERSHIP(MEM_ID IN NUMBER)
AS

BEGIN

UPDATE MEMBERSHIP_INFO I
SET I.MEMBERSHIP_STATUS= 'EXPIRED',
    I.UPDATED_DATESTAMP=sysdate
WHERE I.MEMBER_ID= MEM_ID;


END;

EXECUTE CANCEL_MEMBERSHIP(10);

SELECT * FROM MEMBER
WHERE MEMBER_ID=10;


--#7

SELECT * FROM MOVIE_INVENTORY
WHERE INVENTORY_IN_HAND=0;


--#8

SELECT D.MEMBERSHIP_TYPE_ID, D.TOTAL_MEMBERS, E.MEMBERSHIP_TYPE_DESCRIPTION, E.DVD_AT_A_TIME,
E.DVD_AT_A_TIME, E.MAX_DVD_ALLOWED_PER_MONTH FROM
(SELECT  A.MEMBERSHIP_TYPE_ID, A.TOTAL_MEMBERS FROM 
(SELECT I.MEMBERSHIP_TYPE_ID, COUNT(*) AS TOTAL_MEMBERS FROM MEMBERSHIP_INFO I
GROUP BY MEMBERSHIP_TYPE_ID) A,
(SELECT max(B.TOTAL_MEMBERS) AS MAX_COUNT FROM
(
SELECT J.MEMBERSHIP_TYPE_ID, COUNT(*) AS TOTAL_MEMBERS FROM MEMBERSHIP_INFO J
GROUP BY MEMBERSHIP_TYPE_ID) B) C
WHERE A.TOTAL_MEMBERS= C.MAX_COUNT) D
JOIN MEMBERSHIP_TYPE E
ON D.MEMBERSHIP_TYPE_ID=E.MEMBERSHIP_TYPE_ID;


--#9

SELECT M.MEMBER_FIRST_NAME, M.MEMBER_LAST_NAME, I.MOVIE_NAME, K.TIMES_RENTED FROM MEMBER M
JOIN (SELECT MEMBER_ID, MOVIE_ID, COUNT(*) AS TIMES_RENTED FROM RENTAL_HISTORY
GROUP BY MEMBER_ID, MOVIE_ID) K
ON M.MEMBER_ID = K.MEMBER_ID
JOIN MOVIE_INFO I
ON K.MOVIE_ID= I.MOVIE_ID
WHERE K.TIMES_RENTED>1;

--#10

SELECT I.MOVIE_NAME, I.MOVIE_ID, L.NUM_CUST_RENTING FROM MOVIE_INFO I
LEFT OUTER JOIN
(SELECT K.MOVIE_ID, COUNT(*) AS NUM_CUST_RENTING FROM
(SELECT MEMBER_ID, MOVIE_ID, COUNT(*) AS TIMES_RENTED FROM RENTAL_HISTORY
GROUP BY MEMBER_ID, MOVIE_ID)K
GROUP BY K.MOVIE_ID)L
ON I.MOVIE_ID=L.MOVIE_ID
ORDER BY L.NUM_CUST_RENTING DESC;

